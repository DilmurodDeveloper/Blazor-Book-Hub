@page "/user/read/{BookId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container my-4">
    <h3 class="text-center mb-4">Read Book</h3>

    @if (loading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
            <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
            <span class="ms-3">Loading PDF...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger text-center" role="alert">
            @errorMessage
        </div>
    }
    else if (!string.IsNullOrEmpty(pdfUrl))
    {
        <div class="ratio ratio-16x9 shadow rounded border">
            <iframe src="@pdfUrl" frameborder="0" allowfullscreen></iframe>
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center" role="alert">
            No PDF available for this book.
        </div>
    }
</div>

@code {
    [Parameter]
    public int BookId { get; set; }

    private string? pdfUrl;
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        errorMessage = null;
        try
        {
            var book = await Http.GetFromJsonAsync<BookDto>($"api/books/{BookId}");
            if (book != null && !string.IsNullOrEmpty(book.PdfPath))
            {
                pdfUrl = book.PdfPath.StartsWith("http") ? book.PdfPath : NavigationManager.BaseUri + book.PdfPath;
            }
            else
            {
                errorMessage = "PDF not found for this book.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading PDF: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
}
