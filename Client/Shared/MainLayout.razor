@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navMenuContent"
                aria-controls="navMenuContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse justify-content-between" id="navMenuContent">
            <NavMenu />

        </div>
    </div>
</nav>

<main class="container my-4">
    @Body
</main>

@code {
    private bool isAdmin = false;
    private bool isUser = false;
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await LoadUserRole();
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        authState = await task;
        UpdateUserRoles();
        StateHasChanged();
    }

    private async Task LoadUserRole()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        UpdateUserRoles();
    }

    private void UpdateUserRoles()
    {
        if (authState?.User.Identity is not { IsAuthenticated: true })
        {
            isAdmin = false;
            isUser = false;
            return;
        }

        isAdmin = authState.User.IsInRole("Admin");
        isUser = authState.User.IsInRole("User");
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}
