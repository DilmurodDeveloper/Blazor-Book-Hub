@page "/login"
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject BlazorBookHub.Client.Services.JwtAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<div class="login-background d-flex justify-content-center align-items-center vh-100">
    <div id="loginCard" class="card shadow-sm p-4" style="width: 360px;">
        <h3 class="text-center mb-4">Login</h3>

        @if (showSuccessMessage)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                You have successfully registered! Please login.
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => showSuccessMessage = false"></button>
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label" for="emailInput">Email</label>
                <InputText id="emailInput" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label class="form-label" for="passwordInput">Password</label>
                <InputText id="passwordInput" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>

        <p class="mt-3 text-center">
            Not registered? <a href="/register">Register here</a>
        </p>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private string? errorMessage;
    private bool showSuccessMessage = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("registered", out var value) && value == "true")
        {
            showSuccessMessage = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("fadeIn", "loginCard");
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result != null)
                {
                    await LocalStorage.SetItemAsync("authToken", result.Token);
                    await LocalStorage.SetItemAsync("userName", result.FullName);
                    await LocalStorage.SetItemAsync("userRoles", result.Roles);

                    AuthStateProvider.NotifyUserAuthentication(result.Token);

                    if (result.Roles.Contains("Admin"))
                    {
                        NavigationManager.NavigateTo("/admin/dashboard");
                    }
                    else if (result.Roles.Contains("User"))
                    {
                        NavigationManager.NavigateTo("/user/books");
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/");
                    }
                }
                else
                {
                    errorMessage = "An invalid response was received from the server.";
                }
            }
            else
            {
                errorMessage = "Incorrect email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }
}
