@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@implements IDisposable

<div class="nav-menu">
    <nav>
        <NavLink href="/" Match="NavLinkMatch.All">Home</NavLink>

        @if (isAdmin)
        {
            <NavLink href="/admin/books">Book management</NavLink>
            <NavLink href="/admin/categories">Category management</NavLink>
            <NavLink href="/admin/users">User management</NavLink>
        }

        @if (isUser)
        {
            <NavLink href="/user/books">Books</NavLink>
            <NavLink href="/user/profile">Profile</NavLink>
        }

        @if (isUser || isAdmin)
        {
            <button class="btn btn-link" @onclick="Logout">Logout</button>
        }
    </nav>
</div>

@code {
    private bool isAdmin = false;
    private bool isUser = false;
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await LoadUserRole();
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        authState = await task;
        UpdateUserRoles();
        StateHasChanged();
    }

    private async Task LoadUserRole()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();
        UpdateUserRoles();
    }

    private void UpdateUserRoles()
    {
        isAdmin = authState?.User.IsInRole("Admin") ?? false;
        isUser = authState?.User.IsInRole("User") ?? false;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/login", true);
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}
