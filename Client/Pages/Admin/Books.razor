@page "/admin/books"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

<h3 class="mb-4 text-center text-primary">Book Management</h3>

<div class="d-flex justify-content-end mb-4">
    <button class="btn btn-success" @onclick="NavigateToUploadForCreate">
        <i class="bi bi-plus-lg me-2"></i> Add New Book
    </button>
</div>

<div class="mb-4 d-flex flex-column flex-md-row align-items-md-center gap-3">
    <input class="form-control w-100 w-md-auto" type="search" placeholder="Search by title, author..."
           @bind="SearchTerm" @bind:event="oninput" />

    <select class="form-select w-100 w-md-auto" @bind="SelectedCategoryId">
        <option value="0">All Categories</option>
        @if (categories != null)
        {
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        }
    </select>
</div>

@if (books == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2">Loading books...</p>
    </div>
}
else if (!filteredBooks.Any())
{
    <div class="alert alert-warning text-center">No books found.</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var book in filteredBooks)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0 custom-card">
                    @if (!string.IsNullOrWhiteSpace(book.CoverImagePath))
                    {
                        <img src="@($"/{book.CoverImagePath}")" class="card-img-top object-fit-cover" alt="Book Cover" style="height:250px;" />
                    }
                    else
                    {
                        <div class="bg-secondary d-flex justify-content-center align-items-center" style="height:250px; color:white;">
                            <i class="bi bi-journal-bookmark fs-1"></i>
                        </div>
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text text-muted mb-1"><strong>Author:</strong> @book.Author</p>
                        <p class="card-text text-muted mb-2"><strong>Category:</strong> @book.CategoryName</p>
                        <div class="mt-auto d-flex justify-content-between align-items-center">
                            @if (!string.IsNullOrWhiteSpace(book.PdfPath))
                            {
                                <a href="@($"/{book.PdfPath}")" target="_blank" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-file-earmark-pdf me-1"></i> View PDF
                                </a>
                            }
                            <div>
                                <button class="btn btn-sm btn-info me-2" @onclick="() => NavigateToUploadForEdit(book.Id)" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteBook(book.Id)" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<BookDto>? books;
    private List<BookDto> filteredBooks = new();
    private List<CategoryDto>? categories;
    private string searchTerm = string.Empty;
    private int selectedCategoryId = 0;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                ApplyFilter();
            }
        }
    }

    private int SelectedCategoryId
    {
        get => selectedCategoryId;
        set
        {
            if (selectedCategoryId != value)
            {
                selectedCategoryId = value;
                ApplyFilter();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadBooks();
    }

    private async Task LoadCategories()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/categories") ?? new();
    }

    private async Task LoadBooks()
    {
        books = await Http.GetFromJsonAsync<List<BookDto>>("api/books") ?? new();
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (books == null) return;

        filteredBooks = books
            .Where(b =>
                (string.IsNullOrWhiteSpace(searchTerm) ||
                    b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (selectedCategoryId == 0 || b.CategoryId == selectedCategoryId))
            .ToList();

        StateHasChanged();
    }

    private void NavigateToUploadForCreate()
    {
        NavigationManager.NavigateTo("/admin/upload");
    }

    private void NavigateToUploadForEdit(int id)
    {
        NavigationManager.NavigateTo($"/admin/upload/{id}");
    }

    private async Task DeleteBook(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/books/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadBooks();
            }
            else
            {
            }
        }
    }
}
