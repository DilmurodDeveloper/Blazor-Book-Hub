@page "/user/books"
@inject HttpClient Http

<h3 class="mb-4 text-center fw-bold text-primary">Books Library</h3>

@if (loading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-4 g-3 align-items-center">
        <div class="col-md-7 col-12">
            <div class="input-group">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-search"></i>
                </span>
                <input type="search" class="form-control" placeholder="Search by title, author..."
                       @bind="SearchTerm" @bind:event="oninput" />
            </div>
        </div>

        <div class="col-md-5 col-12">
            <select class="form-select" @bind="SelectedCategoryId" aria-label="Filter by category">
                <option value="0">All Categories</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
    </div>

    @if (!filteredBooks.Any())
    {
        <div class="alert alert-warning text-center" role="alert">
            No books found matching your criteria.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
            @foreach (var book in filteredBooks)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 rounded-3">
                        @if (!string.IsNullOrEmpty(book.CoverImagePath))
                        {
                            <img src="@book.CoverImagePath" class="card-img-top object-fit-cover" style="height: 220px;" alt="@book.Title" />
                        }
                        else
                        {
                            <div class="bg-secondary d-flex justify-content-center align-items-center" style="height: 220px; color: white;">
                                <i class="bi bi-journal-bookmark fs-1"></i>
                            </div>
                        }
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-truncate" title="@book.Title">@book.Title</h5>
                            <p class="card-text mb-1"><small class="text-muted"><i class="bi bi-person-fill me-1"></i>@book.Author</small></p>
                            <p class="card-text text-truncate" style="flex-grow:1;" title="@book.Description">@book.Description</p>
                            <a href="@book.PdfPath" target="_blank" class="btn btn-primary mt-auto">
                                <i class="bi bi-file-earmark-pdf me-2"></i> Read PDF
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private List<BookDto> books = new();
    private List<CategoryDto> categories = new();
    private List<BookDto> filteredBooks = new();

    private string searchTerm = string.Empty;
    private int selectedCategoryId = 0;
    private bool loading = true;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                ApplyFilter();
            }
        }
    }

    private int SelectedCategoryId
    {
        get => selectedCategoryId;
        set
        {
            if (selectedCategoryId != value)
            {
                selectedCategoryId = value;
                ApplyFilter();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            books = await Http.GetFromJsonAsync<List<BookDto>>("api/books") ?? new();
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/categories") ?? new();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading books or categories: " + ex.Message);
        }
        loading = false;
    }

    private void ApplyFilter()
    {
        filteredBooks = books
            .Where(b =>
                (string.IsNullOrWhiteSpace(searchTerm) ||
                    b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (selectedCategoryId == 0 || b.CategoryId == selectedCategoryId))
            .ToList();

        StateHasChanged();
    }
}
