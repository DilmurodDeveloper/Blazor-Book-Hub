@page "/user/profile"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>User Profile</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (loadError != null)
{
    <p class="text-danger">Error loading profile: @loadError</p>
}
else
{
    <EditForm Model="profileModel" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="fullName" class="form-label">Full Name</label>
            <InputText id="fullName" class="form-control" @bind-Value="profileModel.FullName" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="profileModel.Email" />
        </div>

        <div class="mb-3">
            <label for="birthDate" class="form-label">Birth Date</label>
            <InputDate id="birthDate" class="form-control" @bind-Value="profileModel.BirthDate" />
        </div>

        <div class="mb-3">
            <label for="gender" class="form-label">Gender</label>
            <InputSelect id="gender" class="form-select" @bind-Value="profileModel.Gender">
                <option value="">Select gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </InputSelect>
        </div>

        @* <div class="mb-3">
            <label for="avatarUrl" class="form-label">Avatar URL</label>
            <InputText id="avatarUrl" class="form-control" @bind-Value="profileModel.AvatarUrl" />
        </div> *@

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private UserProfileDto profileModel = new();
    private bool loading = true;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profileModel = await Http.GetFromJsonAsync<UserProfileDto>("api/user/profile")
                           ?? new UserProfileDto();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
        loading = false;
    }

    private async Task UpdateProfile()
    {
        try
        {
            var updateDto = new UpdateUserProfileDto
            {
                FullName = profileModel.FullName,
                Email = profileModel.Email,
                // AvatarUrl = profileModel.AvatarUrl,
                BirthDate = profileModel.BirthDate,
                Gender = profileModel.Gender
            };

            var response = await Http.PutAsJsonAsync("api/user/profile", updateDto);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/user/books");
            }
            else
            {
                loadError = "Failed to update profile";
            }
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }
}
