@page "/admin/upload"
@page "/admin/upload/{BookId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4">@((BookId == 0) ? "Add a New Book" : "Edit Book")</h3>

<EditForm Model="@bookModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-floating mb-3">
        <InputText @bind-Value="bookModel.Title" id="titleInput" class="form-control" placeholder="Title" />
        <label for="titleInput">Title</label>
    </div>

    <div class="form-floating mb-3">
        <InputText @bind-Value="bookModel.Author" id="authorInput" class="form-control" placeholder="Author" />
        <label for="authorInput">Author</label>
    </div>

    <div class="form-floating mb-3">
        <InputTextArea @bind-Value="bookModel.Description" id="descriptionInput" class="form-control" style="height: 120px;" placeholder="Description" />
        <label for="descriptionInput">Description</label>
    </div>

    <div class="form-floating mb-4">
        <select class="form-select" id="categorySelect" @bind="bookModel.CategoryId" required>
            <option value="0" disabled>Select category</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
        <label for="categorySelect">Category</label>
    </div>


    <div class="mb-4">
        <label class="form-label fw-semibold">Select PDF file</label>
        <InputFile OnChange="@OnPdfSelected" class="form-control" />
        @if (BookId != 0 && !string.IsNullOrEmpty(existingPdfPath))
        {
            <div class="mt-1 text-muted"><small>Current file: @existingPdfPath</small></div>
        }
    </div>

    <div class="mb-4">
        <label class="form-label fw-semibold">Select image file</label>
        <InputFile OnChange="@OnImageSelected" class="form-control" />
        @if (BookId != 0 && !string.IsNullOrEmpty(existingImagePath))
        {
            <div class="mt-1 text-muted"><small>Current image: @existingImagePath</small></div>
        }
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary">@((BookId == 0) ? "Upload" : "Update")</button>
        <button type="button" class="btn btn-secondary ms-3" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrWhiteSpace(successMessage))
{
    <div class="alert alert-success text-center mt-4" role="alert">@successMessage</div>
}
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger text-center mt-4" role="alert">@errorMessage</div>
}

@code {
    [Parameter]
    public int BookId { get; set; } = 0;

    private BookUploadClientDto bookModel = new();
    private string? existingPdfPath;
    private string? existingImagePath;
    private IBrowserFile? pdfFile;
    private IBrowserFile? imageFile;

    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private List<CategoryDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/categories") ?? new();

        if (BookId != 0)
        {
            var book = await Http.GetFromJsonAsync<BookDto>($"api/books/{BookId}");
            if (book != null)
            {
                bookModel.Title = book.Title;
                bookModel.Author = book.Author;
                bookModel.Description = book.Description;
                bookModel.CategoryId = book.CategoryId;

                existingPdfPath = book.PdfPath;
                existingImagePath = book.CoverImagePath;
            }
            else
            {
                errorMessage = "Book not found.";
            }
        }
    }

    private void OnPdfSelected(InputFileChangeEventArgs e)
    {
        pdfFile = e.File;
    }

    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }

    private async Task HandleSubmit()
    {
        try
        {
            successMessage = string.Empty;
            errorMessage = string.Empty;

            if (bookModel.CategoryId == 0)
            {
                errorMessage = "Category ID must be greater than 0.";
                return;
            }

            var content = new MultipartFormDataContent();

            if (pdfFile != null)
            {
                var pdfStream = pdfFile.OpenReadStream(600 * 1024 * 1024);
                var pdfContent = new StreamContent(pdfStream);
                pdfContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(pdfFile.ContentType);
                content.Add(pdfContent, "PdfFile", pdfFile.Name);
            }

            if (imageFile != null)
            {
                var imageStream = imageFile.OpenReadStream(10 * 1024 * 1024);
                var imageContent = new StreamContent(imageStream);
                imageContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imageFile.ContentType);
                content.Add(imageContent, "ImageFile", imageFile.Name);
            }

            content.Add(new StringContent(bookModel.Title ?? ""), "Title");
            content.Add(new StringContent(bookModel.Author ?? ""), "Author");
            content.Add(new StringContent(bookModel.Description ?? ""), "Description");
            content.Add(new StringContent(bookModel.CategoryId.ToString()), "CategoryId");

            HttpResponseMessage response;

            if (BookId == 0)
            {
                response = await Http.PostAsync("api/books/upload", content);
            }
            else
            {
                response = await Http.PutAsync($"api/books/upload/{BookId}", content);
            }

            if (response.IsSuccessStatusCode)
            {
                successMessage = BookId == 0 ? "The book was successfully uploaded." : "The book was successfully updated.";
                NavigationManager.NavigateTo("/admin/books");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Operation failed: {response.ReasonPhrase}. Details: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/books");
    }
}
